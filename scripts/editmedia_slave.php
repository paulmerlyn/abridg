<?php
/*
editmedia_slave.php is the slave script for editmedia.php (and is similar to [a little simpler than] upload_slave.php). It updates the row in the media_table corresponding to the media FileID identified by $_SESSION['EditMediaFile'] (which is originally set inside assign_slave.php and subsequently used by both editmedia.php and editmedia_slave.php). Specifically, editmedia_slave.php updates Snapshot, Title, FileDescription, FileCategory, and CaptureDate. Note: I've decided that the UploadDate (which was automatically set within upload_slave.php when the media file was first uploaded) should not be changed by virtue of any edits to the media file's details within editmedia_slave.php. Further, since the media file itself can't be changed as part of this edit process, MediaClass and FileType (both derived and set automatically by upload_slave.php during the original upload process) will also remain unchanged. And of course there's no need to change QueryString or the AuthorizedAssociateIDs columns. Finally, the value of the OwnerID column for the row in media_table with this FileID of course remains unchanged also.
	One other thing. If the Administrator does upload a different Snapshot file via editmedia.php to replace the existing one (an option that will only be available if the media item's MediaClass == 'video'), then we need to rename the actual snapshot file in the /snapshots directory and the composite VideoSnapshot file (remembering to append the media item's FileID to ensure that file isn't at risk of getting written over, as would otherwise happen, for example, if Owner X uploads "mycutepuppy.jpg" and Owner Y uploads a totally different image that was also called "mycutepuppy.jpg").
*/

// Start a session
session_start();

if ($_SESSION['Authenticated'] != 'true') header("Location: /index.php");

ob_start(); // Used in conjunction with ob_flush() [see www.tutorialized.com/view/tutorial/PHP-redirect-page/27316], this allows me to postpone issuing output to the screen until after the header has been sent.

// Connect to DB
$db = mysql_connect('localhost', 'paulme6_merlyn', 'fePhaCj64mkik')
or die('Could not connect: ' . mysql_error());
mysql_select_db('paulme6_abridg') or die('Could not connect to the abridg database: ' . mysql_error());
	
// Retrieve details associated with FileID == $_SESSION['EditMediaFile'] for use in prepopulating the HTML form.
$query = "SELECT * FROM media_table WHERE FileID = ".$_SESSION['EditMediaFile'];
$result = mysql_query($query) or die('Query (select * from media_table) failed: ' . mysql_error().' and the database query string was: '.$query);
$row = mysql_fetch_assoc($result);
$Filename = $row['Filename']; // This doesn't ever get changed at all during an edit of media file details, but we will need $Filename much later during the regeneration of the unique querystring page. (We'll need to regnerate that page iff the Administrator uploaded a new snapshot for his/her video. Note that we won't ever need to regenerate the querystring page when MediaClass is "image" or "application" (document) because in the case of the former, the snapshot is autogenerated from the image media file (which can't be changed via editmedia.php), and in the case of the latter, the snapshot is automatically given to each document item as a generic thumbnail (e.g. snapshot file = "generic-document.png").)
$QueryString = $row['QueryString'];
$MediaClass = $row['MediaClass'];
$SnapshotOld = $row['Snapshot']; // Store the "old" (prior existing) value of Snapshot in $SnapshotOld. We'll use this variable below in a rename() statement to rename the snapshot file in the /snapshots directory from its old (prior existing) value to whatever new value it may have after editmedia_slave.php has processed the Administrator's uploading of a new Snapshot file. Of course, the old and new will be the same if the Snapshot file isn't replaced with a different one.
$VideoSnapshotOld = $row['VideoSnapshot']; // Similarly, store the "old" (prior existing) value of VideoSnapshot in $VideoSnapshotOld. 

// Create short variable names
$Snapshot = $_FILES['Snapshot']['name'][0]; // Note: this is drawn from the $_FILES superglobal array.
$EditMedia = $_POST['EditMedia']; // Submit button
$Title = $_POST['Title'];
$FileDescription = $_POST['FileDescription'];
$CaptureDate = $_POST['CaptureDate'];
$FileCategory = $_POST['FileCategory'];
?>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>editmedia Slave Script</title>
<link href="/abridg.css" rel="stylesheet" type="text/css">
</head>
<body>

<?php
/*
Begin PHP form validation.
*/

// Create a session variable for the PHP form validation flag, and initialize it to 'false' i.e. assume it's valid.
$_SESSION['phpinvalidflag'] = false;

// Create session variables to hold inline error messages, and initialize them to blank.
$_SESSION['MsgSnapshot'] = NULL;
$_SESSION['MsgFileDescription'] = NULL;
$_SESSION['MsgCaptureDate'] = NULL;
$_SESSION['MsgFileCategory'] = NULL;

// Seek to validate $Snapshot (optional field)
$illegalCharSet = '[#^*+`|";,<>]+'; // Exclude everything except A-Z, a-z, numbers, period, hyphen, apostrophe (single quote), $, %, ~, &, ?, =, !, slash, backslash, space, period, and parentheses. (Note that spaces and apostrphoes in the filename are allowed but are replaced later below with underscores via str_replace().)
if (!empty($Snapshot) && ereg($illegalCharSet, $Snapshot))
	{
	$_SESSION['MsgSnapshot'] = "<span class='errorphp'><br>Please select and upload a valid snapshot file.<br></span>";
	$_SESSION['phpinvalidflag'] = true; 
	};

// Seek to validate $FileDescription (required field)
if (strlen($FileDescription) > 250) // Require no more than 250 characters (including spaces)
	{
	$_SESSION['MsgFileDescription'] = "<span class='errorphp'>Maximum of 250 characters.<br></span>";
	$_SESSION['phpinvalidflag'] = true; 
	};

// Seek to validate $CaptureDate (required)
$illegalCharSet = '/[^0-9\/]+/'; // Reject everything that contains one or more characters that is neither a slash (/) nor a digit. (Note the need to escape the slash.)
$reqdCharSet = '[0-1][0-9]\/[0-3][0-9]\/[0-9]{4}';  // Required format is MM/DD/YYYY. (Note my choice to use ereg for reqdCharSet (less confusing re slashes than using preg_match.)
if (preg_match($illegalCharSet, $CaptureDate) || !ereg($reqdCharSet, $CaptureDate))
	{
	$_SESSION['MsgCaptureDate'] = '<span class="errorphp"><br>Date must have format MM/DD/YYYY. Use only numbers and slash (/) character.<br></span>';
	$_SESSION['phpinvalidflag'] = true; 
	}

// Seek to validate $FileCategory (required field)
if ($FileCategory == "")
	{
	$_SESSION['MsgFileCategory'] = '<span class="errorphp"><br>Please make a selection from the drop-down menu.<br></span>';
	$_SESSION['phpinvalidflag'] = true; 
	};

//Now go back to the previous page (editmedia.php) and show any PHP inline validation error messages if the $_SESSION['phpinvalidflag'] has been set to true. ... otherwise, proceed to update the database with the user's form data.
if ($_SESSION['phpinvalidflag'])
	{
	?>
	<script type='text/javascript' language='javascript'>window.location = '/editmedia.php';</script>
	<noscript>
	<?php
	if (isset($_SERVER['HTTP_REFERER']))
		header("Location: ".$_SERVER['HTTP_REFERER']); // Go back to previous page. (Similar to echoing the Javascript statement: history.go(-1) or history.back() except I think $_SERVER['HTTP_REFERER'] reloads the page. So the javascript 'history.back()' method is more suitable. However, if Javascript is enabled, php form validation is moot. And if Javascript is disabled, then the javascript 'history.back()' method won't work anyway.
	?>
	</noscript>
	</body>
	</html>
	<?php
	exit;
	}

// Assess the error code associated with the filename for the (optional) snapshot file upload for any problem (i.e. non-zero code).
if (!empty($Snapshot) && $_FILES['Snapshot']['error'][0] > 0)
	{
	echo '<p class=\'text\' style=\'margin-left: 150px; margin-right: 150px; margin-top: 40px; margin-bottom: 20px;\'>Problem: ';
	switch ($_FILES['Snapshot']['error'][0])
		{
		case 1: echo 'Snapshot file exceeded upload_max_file_size.'; break;
		case 2: echo 'Your snapshot file exceeded the maximum allowable file size.'; break;
		case 3: echo 'Snapshot file only partially uploaded.'; break;
		case 4: echo 'No Snapshot file uploaded.'; break;
		}
	echo ' Use your browser\'s Back button and try again.</p></body>';
	echo '</html>';
	ob_flush();
	exit;
	}

// Does the (optional) Snapshot file have the correct MIME type (if the administrator uploaded a snapshot)?
if (!empty($Snapshot))
	{ 
	if ($_FILES['Snapshot']['type'][0] != 'image/jpg' && $_FILES['Snapshot']['type'][0] != 'image/jpeg' && $_FILES['Snapshot']['type'][0] != 'image/pjpeg' && $_FILES['Snapshot']['type'][0] != 'image/gif' && $_FILES['Snapshot']['type'][0] != 'image/png')
		{
		echo "<p class='text' style='margin-left: 150px; margin-right: 150px; margin-top: 40px; margin-bottom: 20px;'>";
		echo 'Your snapshot file is an '.$_FILES['Snapshot']['type'][0].' file. This is a problem.<br><br>' ;
		echo 'Your snapshot file must be of type .jpg or .jpeg or .gif or .png.<br><br>';
		echo 'Please <a href=\'/upload.php\' onclick=\'javascript: window.open("/editmedia.php",\'_self\'); return false;\'>try again</a> using a compatible file type.';
		echo "</p>";
		echo '</body>';
		echo '</html>';
		ob_flush();
		exit;
		}
	}

// Also, as an additional security check, examine the (optional) snapshot file's extension if the administrator uploaded one.
if (!empty($Snapshot))
	{ 
	$fileExt = strrchr($_FILES['Snapshot']['name'][0], '.'); 
	$allowableExtensions = array(".flv", ".FLV", ".mp4", ".MP4", ".jpg", ".JPG",".jpeg", ".JPEG", ".gif", ".GIF", ".png", ".PNG");
	if (!in_array($fileExt, $allowableExtensions))
		{
		echo '<p class="text" style="margin-left: 150px; margin-right: 150px; margin-top: 40px; margin-bottom: 20px;">Your snapshot file must be of type "flv" or "mp4" or "jpg" or "jpeg" or "png" or "gif". Please <a href=\'javascript: location.href = "/editmedia.php";\'>try again</a> using a file of this type.</p>';
		echo '</body>';
		echo '</html>';
		ob_flush();
		exit;
		}
	}    

/* Manipulate data prior to insertion into the media_table */

// Clean up the name of the snapshot file before attempting any additional file processing.
if (!empty($Snapshot))
	{
	$Snapshot = str_replace(' ', '_', $Snapshot);
	$Snapshot = str_replace("'", "", $Snapshot); // Remove any apostrophes (') in filename. (Apache needs either this or urlencode()'ing of the filename.)
	$myArray = explode('.', $Snapshot); // Also remove any periods (.) except for the final period before the file extension (e.g. ".jpg").
	$NofParts = sizeof($myArray);
	$myString = '';
	for ($i=0; $i < $NofParts - 1; $i++)
		{
		$myString .= $myArray[$i];
		}
	$myString = $myString.'.'.$myArray[$NofParts - 1];
	$Snapshot = $myString;
	}

/* Define third-party createThumbnail() function to reduce size of an image. Ref. http://nodstrum.com/2006/12/09/image-manipulation-using-php/ for details (Note: also used in nrmedlic file processprofile.php.) */
function createThumbnail($img, $imgPath, $suffix, $newWidth, $newHeight, $quality)
	{
	// Use the file's extension (obtained from pathinfo()) to determine whether we should use imagecreatefromjpeg(), imagecreatefromgif(), or imagecreatefrompng() in the thumbnail creation process.
	switch (strtolower(pathinfo($img, PATHINFO_EXTENSION))) // Note: use of strtolower() alleviates need to case, say, "JPG" in addition to "jpg", etc.
		{
		case 'jpg': $original = imagecreatefromjpeg("$imgPath/$img") or die("Error Opening original"); break;
		case 'jpeg': $original = imagecreatefromjpeg("$imgPath/$img") or die("Error Opening original"); break;
		case 'gif': $original = imagecreatefromgif("$imgPath/$img") or die("Error Opening original"); break;
		case 'png': $original = imagecreatefrompng("$imgPath/$img") or die("Error Opening original"); break;
		default: echo '<p class="text">Sorry. Your snapshot file appears to be of a type that is not supported. Please provide images as .jpg, .jpeg, .gif, or .png file types only. Use the Back button in your browser and try again.</p>'; exit;
		}
			
	// Open and create the original image from the path/file in the argument using PHP's imagecreatefromjpeg() function.
	list($width, $height, $type, $attr) = getimagesize("$imgPath/$img");

	// Resample the image.
	$tempImg = imagecreatetruecolor($newWidth, $newHeight) or die("Cant create temp image");
	imagecopyresized($tempImg, $original, 0, 0, 0, 0, $newWidth, $newHeight, $width, $height) or die("Cant resize copy");

	// Create the new file name. It would actually take the same name as before if I omitted the suffix (set it to '') when calling the createThumbnail() function.
	$newNameE = explode(".", $img);
	$Snapshot = $newNameE[0].$suffix.'.'.$newNameE[1];

	// Save the Snapshot image to the /snapshots directory.
	imagejpeg($tempImg, '/home/paulme6/public_html/abridg/snapshots/'.$Snapshot, $quality) or die("Unable to save snapshot image.");

	// Clean up.
	imagedestroy($original);
	imagedestroy($tempImg);
	return $Snapshot;
	}

// If the user bothered to upload a Snapshot file (either for the first time or as a replacement to a previously uploaded snapshot file), move (via the move_uploaded_file function) the Snapshot file to the /snapshots directory. Note that the snapshot file (if the user bothered to upload one) really won't ever pertain to an image media file (i.e. $row['MediaClass'] == 'image'); only to a video media file (i.e. $row['MediaClass'] == 'video'). If however it did pertain to an image file, we should scale it to 120x90px (landscape) or 90x120px (portrait) after moving it. There's no need to scale the snapshot if it's for a video file because all snapshots associated with MediaClass == 'video' get manipulated below anyway (two images "jwplayerbar.png" and "jwplayerbutton.png" are overlaid on such video snapshots).
// Part I: Moving the uploaded snapshot file.
$originalFileName = $Snapshot;  // (Albeit, after replacement of any extraneous spaces, periods, and any apostrophes)
$upfile = '../snapshots/'.$originalFileName; // A reference to the new path (location) of the snapshot file (which shall retain its original name)
if (!empty($Snapshot))
	{
	if (is_uploaded_file($_FILES['Snapshot']['tmp_name'][0])) // Thus, is_uploaded_file() is called!!
		{
		if (!move_uploaded_file($_FILES['Snapshot']['tmp_name'][0], $upfile)) // Thus, move_uploaded_file() is called!!
			{
			echo 'Problem: Could not move snapshot file to destination directory.';
			exit;
			}
		}
	else
		{
		echo 'Problem: Possible file upload attack. Filename: ';
		echo $_FILES['Snapshot']['name'][0];
		exit;
		}

	// Part II: Having now moved the snapshot file (if the user bothered to provide a snapshot) to the /snapshots directory, we must resize it if $MediaClass == 'image'. NOTE: Actually, Part II will never get executed in editmedia_slave.php (cf. upload_slave.php) because there should never be a situation where $Snapshot is not empty() if $row['MediaClass'] == 'image'. (Remember, editmedia.php only displays the Snaphot field when $row['MediaClass'] == 'video'.)
	if ($row['MediaClass'] == 'image')
		{
		$imgPath = '/home/paulme6/public_html/abridg/snapshots'; // no forward slash.
		$img = $Snapshot; // The name of the file from which a thumbnail will be created.

		// In order to determine the width and height for the scaled thumbnail, we first use the php function getimagesize() to deduce whether the image is landscape or portrait. If landscape, fix width = 120 and scale height proportionately. If portrait, fix height = 120 and scale width proportionately.
		list($width, $height, $type, $attr) = getimagesize('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot);
		if ($width > $height) // landscape
			{
			$newWidth = 120;
			$newHeight = $height * 120/$width;
			}
		else
			{
			$newHeight = 120;
			$newWidth = $width * 120/$height;
			};
	
		$Snapshot = createThumbnail($img, $imgPath, "_thumb", $newWidth, $newHeight, 100);
	
		// Finally, it's appropriate to delete (i.e. unlink in technical PHP parlance) the originally uploaded snapshot file that was moved to the /snapshots directory in Part I above, before it got scaled and renamed.
		@unlink('/home/paulme6/public_html/abridg/snapshots/'.$originalFileName); // (The @ symbol suppresses warning messages if the file that we're trying to delete (i.e. unlink) doesn't exist on the server.)
		}
	}

// Manipulate CaptureDate from its native MM/DD/YYYY format into a YYYY-MM-DD format for insertion into a MySQL table.
$datearray = explode('/', $CaptureDate);
$CaptureDate = $datearray[2].'-'.$datearray[0].'-'.$datearray[1];

/* The composite image file stored in the VideoSnapshot column of the media_table gets used on the index.php page as a graphical hyperlink which, when clicked, opens up the associated media video file within JW Player. In cases where $row['MediaClass'] == 'video', the user may want to replace the existing snapshot. The existing snapshot will either be the composite file (stored in the VideoSnapshot column of media_table) created by upload_slave.php when the user originally uploaded a snapshot (stored in the Snapshot column) for his/her video media file. Or, if the user didn't bother to provide a Snapshot image to accompany his/her video media file during the original media file upload, a blank jwplayer frame (image = "/images/jwplayerframe.png") will have been inserted into the VideoSnapshot column. 
	Within editmedia.php, the Administrator can choose to upload a snapshot for his/her video media file. (In fact, he/she will only see a form field inside editmedia.php to upload a snapshot if the $row['MediaClass'] == 'video'. (There's really no point in inviting the user to upload another snapshot when the media file is an image because upload_slave.php will have made sure that a thumbnail of that image gets created if the user didn't provide a snapshot file. Also, there's no point when the media file is a document because such items get automatically given a generic document thumbnail image as identified in the 'Snapshot' column for MediaClass == 'application'.)
	All that said, if the Administrator has chosen to upload a snapshot for his/her video media file via editmedia.php, we must convert that snapshot into a suitable (composite) form for use as an image hyperlink on the index.php (i.e. "click image to play video"). We'll invoke some GD functions to dynamically build the file whose name will be stored in the VideoSnapshot column (and used as a graphical hyperlink as mentioned above). Specifically, we'll overlay two images onto the user-supplied Snapshot image: (i) firstly, jwplayerbar.png (the control bar of JW Player) along the bottom edge of the Snapshot image, and (ii) secondarily, jwplayerbutton.png (the play triangle button) in the center of the image. This composite image will be stored in the /snapshotsdirectory. It will have the suffix "_comp" to distinguish its name from the name of the user-supplied Snapshot.
 */
$VideoSnapshot = ''; // By default, assign $VideoSnapshot to a blank string. It will only get a non-blank value if $MediaClass == 'video'.
if ($row['MediaClass'] == 'video')
	{
	if (!empty($Snapshot))
		{
		// Part 1, superimposing the jwplayerbar (120px x 10px) onto the lower edge of the user-supplied snapshot image. Specifically, load the source image (jwplayerbar) and the user's snapshot (i.e. destination image) to which the "watermark" (i.e. the jwplayerbar.png image) is applied.
		$sourceImg = imagecreatefrompng('/home/paulme6/public_html/abridg/images/jwplayerbar.png');

		$ExtOfSnapshot = pathinfo($Snapshot, PATHINFO_EXTENSION);
		switch (strtolower($ExtOfSnapshot)) // Note: use of strtolower() alleviates need to case, say, "JPG" in addition to "jpg", etc.
			{
			case 'jpg': $destImg = imagecreatefromjpeg('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot) or die("Error opening jpg original"); break;
			case 'jpeg': $destImg = imagecreatefromjpeg('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot) or die("Error opening jpeg original"); break;
			case 'gif': $destImg = imagecreatefromgif('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot) or die("Error opening gif original"); break;
			case 'png': $destImg = imagecreatefrompng('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot) or die("Error opening png original"); break;
			default: echo '<p class="text">Sorry. Your snapshot appears to be an image file that is not supported. Please provide images as .jpg, .jpeg, .gif, or .png file types only. Use the Back button in your browser and try again.</p>'; exit;
			}
		
		// Resize the destination image to 120px x 90px via GD's imagecopyresized() function (Note: unless the user uploaded a Snapshot exactly in the 4:3 ratio (e.g. 120px x 90px), some stretching or compressing will be necessary (performed automatically).
		$destImgResized = imagecreatetruecolor(120, 90) or die("Cant create a resized image");
		imagecopyresized($destImgResized, $destImg, 0, 0, 0, 0, 120, 90, imagesx($destImg), imagesy($destImg));

		// Get the height/width of the jwplayerbar source image. (This should always be 120px x 10 px landscape as in "JW Player Snapshot Image.mic".)
		$sourceWidth = imagesx($sourceImg);
		$sourceHeight = imagesy($sourceImg);

		// Copy the jwplayerbar source image onto our snapshot image using GD function imagecopy().  (For the best tutorial on the not-so-intuitive imagecopy() params, see: http://www.lateralcode.com/manipulating-images-using-the-php-gd-library/)
		imagecopy($destImgResized, $sourceImg, 0, 80, 0, 0, $sourceWidth, $sourceHeight);

		$snapshotfilenameonly = pathinfo($Snapshot, PATHINFO_FILENAME); // E.g. if the Snapshot was called "mysnapshot.gif", then $snapshotfilenameonly would be "mysnapshot".

		// Save the (now composite) snapshot + jwplayerbar image to the /snapshots directory as a jpg image. If the user-uploaded snapshot file was called, say, "mysnap.png", the new composite image will be called "comp_mysnap.jpg".
		imagejpeg($destImgResized, '/home/paulme6/public_html/abridg/snapshots/'.$snapshotfilenameonly.'_comp.jpg', 95) or die("Unable to save Snapshot + jwplayerbar composite image.");

		// Now part 2, the superimposition of the jwplayerbutton.png image onto the center of the (Snapshot + jwplayerbar) composite image. Redefine source and destination images:
		$sourceImg = imagecreatefrompng('/home/paulme6/public_html/abridg/images/jwplayerbutton.png');

		// Get the height/width of the jwplayerbutton source image. (This should be 15px x 15px.)
		$sourceWidth = imagesx($sourceImg);
		$sourceHeight = imagesy($sourceImg);

		// Copy the jwplayerbutton source image (to go approx in the center of the destination image) onto our composite (jwplayer bar + snapshot) image using GD function imagecopy().  (For the best tutorial on the not-so-intuitive imagecopy() params, see: http://www.lateralcode.com/manipulating-images-using-the-php-gd-library/)
		imagecopy($destImgResized, $sourceImg, 54, 37, 0, 0, $sourceWidth, $sourceHeight);

		// Save the new composite (snapshot + jwplayerbar + jwplayerbutton) image to the /snapshots directory using the same name as it had before.
		imagejpeg($destImgResized, '/home/paulme6/public_html/abridg/snapshots/'.$snapshotfilenameonly.'_comp.jpg', 95) or die("Unable to save Snapshot + jwplayerbar + jwplayerbutton composite image.");

		// Free memory
		imagedestroy($destImgResized);
		
		// Assign the new composite image's name to $VideoSnapshot in readiness for insertion into the media_table.
		$VideoSnapshot = $snapshotfilenameonly.'_comp.jpg';
		}
	}

// Finally, if $Snapshot is empty (i.e. user left Snapshot field blank in the editmedia.php form), then we want to retain any existing values in the Snapshot and VideoSnapshot columns of the media_table.
if (empty($Snapshot))
	{
	$Snapshot = $row['Snapshot'];
	$VideoSnapshot = $row['VideoSnapshot'];
	}

/* Prevent cross-site scripting via htmlspecialchars on these user-entry form field */
$Snapshot = htmlspecialchars($Snapshot, ENT_COMPAT);
$Title = htmlspecialchars($Title, ENT_QUOTES);
$FileDescription = htmlspecialchars($FileDescription, ENT_QUOTES);
$CaptureDate = htmlspecialchars($CaptureDate, ENT_COMPAT);

if (!get_magic_quotes_gpc())
	{
	$Snapshot = addslashes($Snapshot);
	$FileDescription = addslashes($FileDescription);
	$CaptureDate = addslashes($CaptureDate);
	}		

/* We next ensure that every uploaded file (/media and /snapshot) has a unique file name. We ensure this by appending the FileID of the media file associated with that media item or its associated snapshot. Before updating the data in the media_table, rename the snapshot file in the /snapshots directory. A name change will be necessary if $Snapshot (the current/new name of the file) is different from $SnapshotOld (retrieved above via a SELECT statement). */
if ($Snapshot != $SnapshotOld) 
	{
	// This expression looks complex, but it's just a means to insert "_XXX" (where XXX is the media file's FileID) into "myfile.jpg", making it "myfile_XXX.jpg".
	$theSnapshotFile = substr($Snapshot, 0, strrpos($Snapshot, '.')).'_'.$_SESSION['EditMediaFile'].substr($Snapshot, strrpos($Snapshot, '.'));
	rename('/home/paulme6/public_html/abridg/snapshots/'.$Snapshot, '/home/paulme6/public_html/abridg/snapshots/'.$theSnapshotFile);
	$theOldSnapshotFile = substr($SnapshotOld, 0, strrpos($SnapshotOld, '.')).'_'.$_SESSION['EditMediaFile'].substr($SnapshotOld, strrpos($SnapshotOld, '.'));
	@unlink('/home/paulme6/public_html/abridg/snapshots/'.$theOldSnapshotFile); // delete (unlink) the old Snapshot file because it has since been replaced with a new snapshot file.
	
	// If MediaClass for the media file whose details are being edited is 'video', then a change to the Snapshot file will also give rise to a change in the composite (_comp) file whose name is stored in VideoSnapshot of the media_table.
	if ($row['MediaClass'] == 'video')
		{
		// This expression looks complex, but it's just a means to insert "_XXX" (where XXX is the media file's FileID) into "myfile.jpg", making it "myfile_XXX.jpg".
		$theVideoSnapshotFile = substr($VideoSnapshot, 0, strrpos($VideoSnapshot, '.')).'_'.$_SESSION['EditMediaFile'].substr($VideoSnapshot, strrpos($VideoSnapshot, '.'));
		rename('/home/paulme6/public_html/abridg/snapshots/'.$VideoSnapshot, '/home/paulme6/public_html/abridg/snapshots/'.$theVideoSnapshotFile);
		$theOldVideoSnapshotFile = substr($VideoSnapshotOld, 0, strrpos($VideoSnapshotOld, '.')).'_'.$_SESSION['EditMediaFile'].substr($VideoSnapshotOld, strrpos($VideoSnapshotOld, '.'));
		@unlink('/home/paulme6/public_html/abridg/snapshots/'.$theOldVideoSnapshotFile); // delete (unlink) the old VideoSnapshot file because it has since been replaced with a new VideoSnapshot file.
		}
	}
	
// Update data in media_table.
$query = "UPDATE media_table SET Snapshot = '".$Snapshot."', VideoSnapshot = '".$VideoSnapshot."', Title = '".$Title."', FileDescription = '".$FileDescription."', FileCategory = '".$FileCategory."', CaptureDate = '".$CaptureDate."' WHERE FileID = ".$_SESSION['EditMediaFile'];

$result = mysql_query($query) or die('Query (update of media_table) failed: ' . mysql_error().' and the database query string was: '.$query);

/* If the Administrator uploaded a new snapshot file, then we'll need to regenerate the content of the unique web page (originally created by upload_slave.php and whose URL contains the unique $QueryString so that an account holder can share that URL with a friend) iff MediaClass == 'video'. That's because the page for a video includes a reference to the actual snapshot file name, whereas the unique page content for either an image or a document will not need changing after an editmedia operation in either of those two media item types. */
if ($Snapshot != $SnapshotOld && $MediaClass == 'video')
	{
	$uniquePageContent = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>";
	$uniquePageContent .= "<html>";
	$uniquePageContent .= "<head>";
	$uniquePageContent .= "<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1'><meta http-equiv='CONTENT-LANGUAGE' CONTENT='en-US'>";
	$uniquePageContent .= "<title>".$Title."</title>";
	$uniquePageContent .= "<meta NAME='description' CONTENT='Unique page for shareable media file'>";
	$uniquePageContent .= "<link href='/abridg.css' rel='stylesheet' type='text/css'>";
	switch ($MediaClass)
		{
		case 'video' :
			$uniquePageContent .= "<script type='text/javascript' src='/jwplayer/jwplayer.js'></script>";
			break;
		default :
			break; // take no action
		}
	$uniquePageContent .= "</head>";
	$uniquePageContent .= "<body>";
	$uniquePageContent .= "<div id='main'>"; // A pretty good attempt at horz centering in light of 5% left margin in main courtesy http://demo.tutorialzine.com/2010/03/centering-div-vertically-and-horizontally/demo.html.
	$uniquePageContent .= "<div id='relwrapper'>";
	$uniquePageContent .= "<div style='text-align: left;'>";
	$uniquePageContent .= "<table align='center'><tr><td style='padding-top: 100px;'>";
	// This expression looks complex, but it's just a means to insert "_XXX" (where XXX is the media file's $theMediaFileID, obtained above) into "myfile.jpg", making it "myfile_XXX.jpg".
	$theFilenameFile = substr($Filename, 0, strrpos($Filename, '.')).'_'.$_SESSION['EditMediaFile'].substr($Filename, strrpos($Filename, '.'));
	$theSnapshotFile = substr($Snapshot, 0, strrpos($Snapshot, '.')).'_'.$_SESSION['EditMediaFile'].substr($Snapshot, strrpos($Snapshot, '.'));
	switch ($MediaClass)
		{
		case 'image' :
			list($width, $height, $type, $attr) = getimagesize('/home/paulme6/public_html/abridg/media/'.$theFilenameFile);
			$uniquePageContent .= "<img alt='Image loading - please wait' src='/media/".$theFilenameFile."' width='".$width."' height='".$height."'>";
			break;
		case 'video' :
			$uniquePageContent .= "<div id='container'>Loading the player ...</div>";
			$uniquePageContent .= "<script type='text/javascript'>";
			$uniquePageContent .= "jwplayer('container').setup({ flashplayer: '/jwplayer/player.swf', file: '/media/".$theFilenameFile."', height: 377, width: 668, skin: '/jwplayer/skins/newtubedark.zip', image: '/snapshots/".$theSnapshotFile."', stretching: 'fill' }); // Actual video is 377 x 668 (16:9 widescreen); allow extra pixel on either edge";
			$uniquePageContent .= "</script>";
			break;
		}
	$uniquePageContent .= "</td></tr></table>";
	$uniquePageContent .= "</div>";
	$uniquePageContent .= "</div>";
	$uniquePageContent .= "</div>";
	$uniquePageContent .= "</body>";
	$uniquePageContent .= "</html>";
	
	// Opening file
	$fp = fopen('../'.$QueryString.".php","w");

	// Attempt to apply an exclusive lock
	$lk = flock($fp, LOCK_EX);
	if (!$lk) echo "Error locking the unique page content page file!";

	// Write to file
	fwrite($fp, $uniquePageContent, strlen($uniquePageContent));

	// Unlock the file (this would get done by the o/s automatically on exit of the script, but this is a good safe thing to do in case the script served by Apache doesn't end.
	flock($fp, LOCK_UN);

	// Closing file
	fclose($fp);
	}

/* Finally, we need to set a value for $_SESSION['AssociateID'] (which is used on return to index.php Media Gallery to dictate whether the logged in Owner sees his/her own "My Gallery Favorites" or view his/her own content as if he/she were one of his/her content consumers (i.e. friends). We'll set it to $_SESSION['LoggedInOwnersOwnAssociate'] (i.e. the Owner's own "My Gallery Favorites" AssociateID [which gets set when the Owner first logs in in index.php] as a good default choice after an Edit Media opeation. */
$_SESSION['AssociateID'] = $_SESSION['LoggedInOwnersOwnAssociate'];

/* Now that an update of the media_table and all other tasks have taken place, display a confirmation message. */
?>
<div style="text-align: center"> <!-- This div provides centering for older browsers incl. NS4 and IE5. (See http://theodorakis.net/tablecentertest.html#intro.) Use of margin-left: auto and margin-right: auto in the style of the table itself (see below) takes care of centering in newer browsers. -->
<!-- The Administrator is invited to continue with additional edits (via assign.php), or to visit the home page next. -->
<form method="post" action="/index.php">
<table align="center" cellpadding="0" cellspacing="0" style="margin-top: 50px; margin-left: auto; margin-right: auto; position: relative; left: -7px;">
<tr>
<td style="text-align: left;">
<p class='text' style='margin-left: 150px; margin-right: 150px; margin-top: 40px; margin-bottom: 20px;'>Your changes have been entered for the following file: <em><?=$row['Filename']; ?>.</em></p>
<p class='text' style='margin-left: 150px; margin-right: 150px; margin-bottom: 60px;'>Click the button below to visit the Media Gallery. Alternatively, click <a target='_self' href='/assign.php'>here</a> to select additional items for editing or assignment.</p>
</td>
<tr>
<td style="text-align: center;">
<input type='submit' name='next' class='buttonstyle' style="text-align: center;"  name="galleryview" value="Media Gallery">
</td>
</tr>
</table>
</form>
</div>
<?php
ob_end_flush();
?>
</body>
</html>